package com.example.udyothvi

import android.content.Context
import android.util.Log
import android.widget.Toast
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import retrofit2.HttpException
import java.text.SimpleDateFormat
import java.util.*
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun EducationalQualificationPageUI(navController: NavController) {
    val context = LocalContext.current
    val sharedPreferences = context.getSharedPreferences("UdyothviPrefs", Context.MODE_PRIVATE)
    val userEmail = sharedPreferences.getString("user_email", null) ?: ""
    val calendar = Calendar.getInstance()
    val dateFormatter = SimpleDateFormat("dd MMM yyyy", Locale.getDefault())
    val isoFormatter = DateTimeFormatter.ISO_ZONED_DATE_TIME

    var userId by remember { mutableStateOf(0L) }
    var qualificationsList by remember { mutableStateOf(mutableListOf<Map<String, Any>>()) }
    var degree by remember { mutableStateOf("") }
    var customDegree by remember { mutableStateOf("") }
    var school by remember { mutableStateOf("") }
    var startDate by remember { mutableStateOf("") }
    var endDate by remember { mutableStateOf("") }
    var fieldOfStudy by remember { mutableStateOf("") }
    var customFieldOfStudy by remember { mutableStateOf("") }
    var currentlyPursuing by remember { mutableStateOf(false) }
    var isLoading by remember { mutableStateOf(false) }

    var showStartDatePicker by remember { mutableStateOf(false) }
    var showEndDatePicker by remember { mutableStateOf(false) }

    val startDateMillis = remember(startDate) {
        try {
            if (startDate.isNotEmpty()) dateFormatter.parse(startDate)?.time else null
        } catch (e: Exception) {
            null
        }
    }

    LaunchedEffect(Unit) {
        userId = sharedPreferences.getLong("user_id", 0L)
        if (userId == 0L) {
            Log.e("EducationPage", "No userId found for email: $userEmail")
            Toast.makeText(context, "User ID not found. Please log in again.", Toast.LENGTH_LONG).show()
        }
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("Educational Qualification", color = Color.Black) },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = Color.White,
                    titleContentColor = Color.Black
                )
            )
        },
        containerColor = Color.White
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .padding(paddingValues)
                .padding(16.dp)
                .verticalScroll(rememberScrollState())
                .background(Color.White)
        ) {
            // Custom Date Picker for Start Date
            if (showStartDatePicker) {
                CustomDatePickerDialog(
                    onDismiss = { showStartDatePicker = false },
                    onDateSelected = { millis ->
                        val futureLimit = System.currentTimeMillis() + 5L * 365 * 24 * 60 * 60 * 1000
                        if (millis <= futureLimit) {
                            startDate = dateFormatter.format(Date(millis))
                            if (endDate.isNotEmpty() && dateFormatter.parse(endDate)?.time?.let { it < millis } == true) {
                                endDate = ""
                            }
                            showStartDatePicker = false
                        } else {
                            Toast.makeText(context, "Start date cannot be more than 5 years in the future", Toast.LENGTH_SHORT).show()
                        }
                    },
                    title = "Select Start Date",
                    calendar = calendar
                )
            }

            // Custom Date Picker for End Date
            if (showEndDatePicker && !currentlyPursuing) {
                CustomDatePickerDialog(
                    onDismiss = { showEndDatePicker = false },
                    onDateSelected = { millis ->
                        val futureLimit = System.currentTimeMillis() + 5L * 365 * 24 * 60 * 60 * 1000
                        val isValid = if (startDateMillis != null) millis >= startDateMillis && millis <= futureLimit else millis <= futureLimit
                        if (isValid) {
                            endDate = dateFormatter.format(Date(millis))
                            showEndDatePicker = false
                        } else {
                            Toast.makeText(
                                context,
                                if (millis > futureLimit) "End date cannot be more than 5 years in the future" else "End date cannot be before start date",
                                Toast.LENGTH_SHORT
                            ).show()
                        }
                    },
                    title = "Select End Date",
                    calendar = calendar
                )
            }

            // Display added qualifications
            if (qualificationsList.isNotEmpty()) {
                Text("Added Qualifications:", style = MaterialTheme.typography.bodyMedium, color = Color.Black)
                Spacer(modifier = Modifier.height(8.dp))
                qualificationsList.forEach { qualification ->
                    Card(
                        modifier = Modifier.fillMaxWidth().padding(vertical = 4.dp),
                        colors = CardDefaults.cardColors(
                            containerColor = MaterialTheme.colorScheme.surfaceVariant,
                            contentColor = MaterialTheme.colorScheme.onSurfaceVariant
                        )
                    ) {
                        Column(modifier = Modifier.padding(12.dp)) {
                            Text(
                                text = qualification["Degree"]?.toString() ?: "",
                                style = MaterialTheme.typography.bodyLarge.copy(color = MaterialTheme.colorScheme.primary)
                            )
                            Spacer(modifier = Modifier.height(4.dp))
                            Text(
                                text = qualification["School"]?.toString() ?: "",
                                style = MaterialTheme.typography.bodyMedium
                            )
                            Spacer(modifier = Modifier.height(4.dp))
                            Row {
                                Text(
                                    text = qualification["Field of Study"]?.toString() ?: "",
                                    style = MaterialTheme.typography.bodySmall
                                )
                                Spacer(modifier = Modifier.width(8.dp))
                                Text(
                                    text = "${qualification["Start Date"]} - ${qualification["End Date"] ?: "Present"}",
                                    style = MaterialTheme.typography.bodySmall,
                                    color = Color.Gray
                                )
                            }
                        }
                    }
                }
                Spacer(modifier = Modifier.height(8.dp))
            }

            Spacer(modifier = Modifier.height(16.dp))

            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Button(
                    onClick = { navController.navigate("skillsAndMediaPage") },
                    colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.primary)
                ) {
                    Text("Skip")
                }
                Button(
                    onClick = {
                        // Save education data
                        navController.navigate("skillsAndMediaPage")
                    },
                    colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.primary)
                ) {
                    Text("Save and Continue")
                }
            }
        }
    }
} 